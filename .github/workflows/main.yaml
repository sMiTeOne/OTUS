name: Tests
run-name: Tests
on: [push]
jobs:
  Log-Analyzer-Tests:
    runs-on: ubuntu-latest
    env:
      app_name: log_analyzer
    strategy:
      matrix:
        python-version: ["3.10"]
    steps:
      - uses: actions/checkout@master
      - uses: actions/setup-python@v1
        with:
          python-version: '3.10'
          architecture: 'x64'
      - name: installing test dependencies
        run: pip install -r requirements.test.txt
      - name: isort check
        working-directory: ${{ env.app_name }}
        run: python -m isort . --check-only
      - name: black check
        working-directory: ${{ env.app_name }}
        run: python -m black . --check
      - name: unit tests
        working-directory: ${{ env.app_name }}/tests/
        run: PYTHONPATH=../ python test_${{ env.app_name }}.py
  Scoring-API-Tests:
    runs-on: ubuntu-latest
    env:
      app_name: scoring_api
    strategy:
      matrix:
        python-version: ["3.10"]
    steps:
      - uses: actions/checkout@master
      - uses: actions/setup-python@v1
        with:
          python-version: '3.10'
          architecture: 'x64'
      - name: installing test dependencies
        run: pip install -r requirements.test.txt
      - name: installing dependencies
        working-directory: ${{ env.app_name }}
        run: pip install -r requirements.txt
      - name: isort check
        working-directory: ${{ env.app_name }}
        run: python -m isort . --check-only
      - name: black check
        working-directory: ${{ env.app_name }}
        run: python -m black . --check
      - name: unit tests
        working-directory: ${{ env.app_name }}
        run: pytest test.py
  Web-Server-Tests:
    runs-on: ubuntu-latest
    env:
      app_name: web_server
    strategy:
      matrix:
        python-version: ["3.10"]
    steps:
      - uses: actions/checkout@master
      - uses: actions/setup-python@v1
        with:
          python-version: '3.10'
          architecture: 'x64'
      - name: installing test dependencies
        run: pip install -r requirements.test.txt
      - name: isort check
        working-directory: ${{ env.app_name }}
        run: python -m isort . --check-only
      - name: black check
        working-directory: ${{ env.app_name }}
        run: python -m black . --check
      - name: run web server
        working-directory: ${{ env.app_name }}
        run: python httpd.py &
      - name: unit tests
        working-directory: ${{ env.app_name }}
        run: python test.py
  Django-Project-Tests:
    runs-on: ubuntu-latest
    env:
      app_name: django_project
    strategy:
      matrix:
        python-version: ["3.10"]
    steps:
      - uses: actions/checkout@master
      - uses: actions/setup-python@v1
        with:
          python-version: '3.10'
          architecture: 'x64'
      - uses: KengoTODA/actions-setup-docker-compose@v1
        with:
          version: '2.14.2'
      - name: installing test dependencies
        run: pip install -r requirements.test.txt
      - name: installing dependencies
        working-directory: ${{ env.app_name }}
        run: pip install -r requirements.txt
      - name: isort check
        working-directory: ${{ env.app_name }}
        run: python -m isort . --check-only
      - name: black check
        working-directory: ${{ env.app_name }}
        run: python -m black . --check
      - name: run docker containers
        working-directory: ${{ env.app_name }}
        run: docker-compose up -d
      - name: wait postgres startup
        run: sleep 5
      - name: unit tests
        working-directory: ${{ env.app_name }}/hasker/
        run: python -m manage test -v 2 
  Concurrency-Tests:
    runs-on: ubuntu-latest
    env:
      app_name: concurrency
    strategy:
      matrix:
        python-version: ["3.10"]
    steps:
      - uses: actions/checkout@master
      - uses: actions/setup-python@v1
        with:
          python-version: '3.10'
          architecture: 'x64'
      - name: installing test dependencies
        run: pip install -r requirements.test.txt
      - name: isort check
        working-directory: ${{ env.app_name }}
        run: python -m isort . --check-only
      - name: black check
        working-directory: ${{ env.app_name }}
        run: python -m black . --check
      - name: run concurrency
        working-directory: ${{ env.app_name }}
        run: PYTHONPATH=../ python app.py
